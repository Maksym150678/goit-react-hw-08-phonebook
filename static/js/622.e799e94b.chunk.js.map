{"version":3,"file":"static/js/622.e799e94b.chunk.js","mappings":"6KACA,MAAwB,yBAAxB,EAAyD,yBAAzD,EAA0F,yB,6BCGpFA,EAAY,SAAC,GAUZ,IATLC,EASI,EATJA,MACAC,EAQI,EARJA,KACAC,EAOI,EAPJA,MACAC,EAMI,EANJA,YACAC,EAKI,EALJA,SACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,MACAC,EACI,EADJA,SAEMC,GAAKC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IACnC,OACE,gBAAKC,UAAWC,EAAhB,SACGb,IACC,mBAAOc,QAASL,EAAIG,UAAWC,EAA/B,UACGb,EADH,KAEE,kBACEY,UAAWC,EACXR,KAAMA,EACNJ,KAAMA,EACNK,QAASA,EACTC,MAAOA,EACPH,SAAUA,EACVF,MAAOA,EACPO,GAAIA,EACJN,YAAaA,EACbK,SAAUA,QAMrB,EAED,IAEAT,EAAUgB,aAAe,CACvBV,KAAM,OACND,UAAU,E,uDC3CL,IAAMY,EAAS,CAClBf,KAAM,CACJD,MAAO,OACPC,KAAM,OACNE,YAAa,aACbC,UAAU,EACVC,KAAM,OACNC,QAAS,yHACTC,MACE,0IAEJU,MAAO,CACLjB,MAAO,QACPC,KAAM,QACNE,YAAa,cACbC,UAAU,EACVC,KAAM,QACNC,QAAS,mDACTC,MAAO,8BAETW,SAAU,CACRlB,MAAO,WACPC,KAAM,WACNE,YAAa,iBACbC,UAAU,EACVC,KAAM,WACNE,MAAO,8B,uJCzBb,EAAwB,yB,SCsDxB,EAlDkB,SAAC,GAAkB,IAAhBY,EAAe,EAAfA,SACnB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOH,EAAP,KAAcI,EAAd,KACA,GAAgCD,EAAAA,EAAAA,UAAS,IAAzC,eAAOF,EAAP,KAAiBI,EAAjB,KAEMC,EAAoB,SAAAC,GACxB,MAAwBA,EAAMC,cAAtBxB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,QACHoB,EAASnB,GACT,MACF,IAAK,WACHoB,EAAYpB,GACZ,MACF,QACE,OAEL,EAcKwB,EAAY,WAChBL,EAAS,IACTC,EAAY,GACb,EACD,OACE,kBAAMH,SAjBa,SAAAK,GACnBA,EAAMG,iBAMNR,EALiB,CACfF,MAAAA,EACAC,SAAAA,IAKFQ,GACD,EAOC,WACE,SAAC3B,EAAA,GAAD,QAAWG,MAAOe,EAAOT,SAAUe,GAAuBP,EAAAA,EAAAA,SAC1D,SAACjB,EAAA,GAAD,QACEG,MAAOgB,EACPV,SAAUe,GACNP,EAAAA,EAAAA,YAEN,mBAAQX,KAAK,SAASO,UAAWC,EAAjC,qBAKL,E,UC/BD,EAhBkB,WAChB,IAAMe,GAAWC,EAAAA,EAAAA,MAKjB,OADgBC,EAAAA,EAAAA,MAEP,SAAC,KAAD,CAAUC,GAAG,eAGpB,0BACE,SAAC,EAAD,CAAWZ,SATC,SAAAa,GACdJ,GAASK,EAAAA,EAAAA,IAAMD,GAChB,KAUF,C,wDCnBM,IAkBIrB,EAAS,eAACuB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC7B,EAAI8B,GAWvD,OARE9B,IAFF8B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/TextField/TextField.module.css?cc13","components/Phonebook/TextField/TextField.jsx","components/Phonebook/TextField/fields.js","webpack://goit-react-hw-08-phonebook/./src/components/Phonebook/LoginForm/LoginForm.module.css?88fe","components/Phonebook/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"block\":\"TextField_block__f2IOf\",\"label\":\"TextField_label__XvM14\",\"input\":\"TextField_input__qPjpe\"};","import s from './TextField.module.css';\nimport { nanoid } from 'nanoid';\nimport { useMemo } from 'react';\n\nconst TextField = ({\n  label,\n  name,\n  value,\n  placeholder,\n  required,\n  type,\n  pattern,\n  title,\n  onChange,\n}) => {\n  const id = useMemo(() => nanoid(), []);\n  return (\n    <div className={s.block}>\n      {label && (\n        <label htmlFor={id} className={s.label}>\n          {label}:\n          <input\n            className={s.input}\n            type={type}\n            name={name}\n            pattern={pattern}\n            title={title}\n            required={required}\n            value={value}\n            id={id}\n            placeholder={placeholder}\n            onChange={onChange}\n          />\n        </label>\n      )}\n    </div>\n  );\n};\n\nexport default TextField;\n\nTextField.defaultProps = {\n  type: 'text',\n  required: false,\n};","export const fields = {\n    name: {\n      label: 'Name',\n      name: 'name',\n      placeholder: 'input name',\n      required: true,\n      type: 'text',\n      pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n      title:\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n    },\n    email: {\n      label: 'Email',\n      name: 'email',\n      placeholder: 'input email',\n      required: true,\n      type: 'email',\n      pattern: '([A-z0-9_.-]{1,})@([A-z0-9_.-]{1,}).([A-z]{2,8})',\n      title: 'Please enter correct email',\n    },\n    password: {\n      label: 'Password',\n      name: 'password',\n      placeholder: 'input password',\n      required: true,\n      type: 'password',\n      title: 'Please enter correct email',\n    },\n  };","// extracted by mini-css-extract-plugin\nexport default {\"login\":\"LoginForm_login__l8oLq\"};","import { useState } from 'react';\nimport TextField from 'components/Phonebook/TextField/TextField';\nimport { fields } from 'components/Phonebook/TextField/fields';\nimport s from './LoginForm.module.css';\n\nconst LoginForm = ({ onSubmit }) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const hendleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n      case 'password':\n        setPassword(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const hendleSubmit = event => {\n    event.preventDefault();\n    const dataUser = {\n      email,\n      password,\n    };\n\n    onSubmit(dataUser);\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setEmail('');\n    setPassword('');\n  };\n  return (\n    <form onSubmit={hendleSubmit}>\n      <TextField value={email} onChange={hendleInputChange} {...fields.email} />\n      <TextField\n        value={password}\n        onChange={hendleInputChange}\n        {...fields.password}\n      />\n      <button type=\"submit\" className={s.login}>\n        Login\n      </button>\n    </form>\n  );\n};\n\nexport default LoginForm;","import { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/authOperation';\nimport { Navigate } from 'react-router-dom';\nimport LoginForm from 'components/Phonebook/LoginForm/LoginForm';\nimport useAuth from 'shared/hooks/useAuth';\n\nconst LoginPage = () => {\n  const dispatch = useDispatch();\n  const onLogin = data => {\n    dispatch(login(data));\n  };\n  const isLogin = useAuth();\n  if (isLogin) {\n    return <Navigate to=\"/contacts\" />;\n  }\n  return (\n    <div>\n      <LoginForm onSubmit={onLogin} />\n    </div>\n  );\n};\n\nexport default LoginPage;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["TextField","label","name","value","placeholder","required","type","pattern","title","onChange","id","useMemo","nanoid","className","s","htmlFor","defaultProps","fields","email","password","onSubmit","useState","setEmail","setPassword","hendleInputChange","event","currentTarget","resetForm","preventDefault","dispatch","useDispatch","useAuth","to","data","login","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}